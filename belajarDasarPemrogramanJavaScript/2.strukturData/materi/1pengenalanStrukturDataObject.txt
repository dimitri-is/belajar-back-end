sebelumnya sempat mempelajari variabel dan tipe data
tipe data yang terbahasa sebelumnya bertipe data primitif yang hanya bisa menyimpan satu nilai
kita akan membahas tipe data yang dapat menyimpan struktur data yang lebih kompleks
beberapa struktur yang akan dipelajari  =
    object
    array
    map
    set



object
berguna dalam pengembangan aplikasi, yang mampu menyimpan nilai dari beragam tipe data dan membentuk data yang lebih kompleks
penetapan sintaks kode sebagai berikut =
    const user = {};
berisi pasangan key(berperan mirip seperti variabel menyimpan sebuah nilai) dan value(berisi nilai dengan tipe data apa pun termasuk object lain) yang dikenal dengan property, yang dapat dituliskan seperti pada contoh sintaks berikut =
    let object = {key1: "value"; key2:"value2"; key3:"value3"}
key harus berupa string(tidak perlu menuliskan tanda petik, kecuali ada karakter khusus seperti spasi) dituliskan sebelum titik dua, diikuti valuenya. contoh penerapan sintaks kode =
    const character = {
        name:"Luke Walker",
        age: 10,
        species:"Human",
        "Hair color": "Blend",
    };
tanda koma bersifat opsional, jika dituliskan akan lebih mudah untuk mengedit baris kodenya
satu object memiliki beberapa pasang key-value yang dipisahkan dengan koma(,)
    const user = {firstName: "Luke", lastName: "Skywalker", age: 19, isJedi: true};
di penulisan object, baris baru tidak penting, dan tak berpengaruh apa pun
lebih baik setiap menetapkannya buat baris baru untuk memisahkan antar nilainya, agar memudahkan dalam edit, dan baca struktur data dari sebuah object
    const   user = {
        firstName: "Luke",
        lastName: "Skywalker",
        age: 19,
        isJedi: true,
    };
untuk mengakses nilai dari properti object, dapat memanggil nama object lalu tanda titik dan diikuti nama propertinya, berikut contoh penerapan kodenya =
    const user =    {
        firstName:  "Luke",
        lastName:   "Skywalker",
        age:    19,
        isJedi: true,
    };

    console.log(`Halo, nama saya ${user.firstName} ${user.lastName}`);
    console.log(`umur saya ${user.age} tahun`);
    output  > Halo, nama saya Luke Skywalker
                umur saya 19 tahun
selain dot operator, juga bisa mengakses properti seperti dari object menggunakan bracket atau tanda kurung siku
    user["Home world!"];
untuk mengakses key yang berspasi atau karakter khusu, kita perlu bracket seperti diatas
    const user = {
        firstName: "Luke,
        lastName: "Skywalker",
        age = 19,
        isJedi = true,
        "home world": "Tattooine"
    };
    console.log(`Halo, nama saya ${user.firstName}, ${user.lastName}`);
    console.log(`Umur saya ${user.age} tahun`);
    console.log(`Saya berasal dari ${user["home world"]}`);
    output  >
            Halo, nama saya Luke Skywalker
            Umur saya 19 tahun
            Saya berasal dari Tattooine
setelah mempelajari membuat object dan menampilkan property di dalamnya, selanjutnya kita akan memodifikasi object
untuk mengubah nilai property, di dalam object, bisa kita gunakan assignment operator(=)
    const spacechip = {
        name: "Millenium Falcon",
        manufacturer: "Corellian Engineering Corporation",
        maxSpeed: 1200,
        color: "Light gray",
    };

    spacechip.color = "Glossy red";
    spacechip["maxSpeed"] = 1300;
    console.log(spacechip);
    output  >
            name: 'Millenium Falcon',
            manufacturer: 'Corellian Engineering Corporation',
            maxSpeed: 1300,
            color: 'Glossy red'
dari contoh sintaks kode tersebut, object spacechip dideklarasikan sebagai const, tetapi karena kita tetap bisa mengubah nilainya?
mengubah nilai berbeda menginisialisasi ulang nilai 
membuat object, kita tidak terikat dengan properti di dalamnya sehingga masih bisa memodifikasinya
berbeda ketika menginisialisasi ulang variabel dari object, contohnya seperti pada sintaks kode berikut =
    const spacechip = {
        name: "Millenium Falcon",
        manufacturer: "Corellian Engineering Corporation",
        maxSpeed: 1200,
        color: "Light gray",
    } outputnya akan terjadi //Error
Ketika kita mengubah object menggunakan assignment operator dan property/key-nya sudah ada, maka nilai di dalamnya akan tergantikan dengan nilai yang baru. Sedangkan, jika property dengan nama key yang ditentukan tidak ditemukan, maka property baru akan ditambahkan ke object.
    const spaceship = {
        name: "Millenium Falcon",
        manufacturer: "Corellian Engineering Corporation",
        maxSpeed: 1200,
        color: "Light gray"
    };

    spaceship.color = "Glossy red";
    spaceship["maxSpeed"] = 1300;
    spaceship.class = "Light freighter";

    console.log(spaceship);

    /* output
            {
            name: 'Millenium Falcon',
            manufacturer: 'Corellian Engineering Corporation',
            maxSpeed: 1300,
            color: 'Glossy red',
            class: 'Light freighter'
            }

Dapat juga menghapus property pada object menggunakan keyword delete seperti berikut =
    const spaceship = {
        name: "Millenium Falcon",
        manufacturer: "Corellian Engineering Corporation",
        maxSpeed: 1200,
        color: "Light gray"
    };

    spaceship.color = "Glossy red";
    spaceship["maxSpeed"] = 1300;

    delete spaceship.manufacturer;

    console.log(spaceship);

                        /* output
                        { name: 'Millenium Falcon', maxSpeed: 1300, color: 'Glossy red' }
                        */
